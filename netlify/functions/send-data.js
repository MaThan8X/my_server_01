// netlify/functions/send-data.js

// 1Ô∏è‚É£ Import Supabase client builder
const { createClient } = require('@supabase/supabase-js')

// 2Ô∏è‚É£ Kh·ªüi Supabase v·ªõi ENV vars t·ª´ Netlify
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_ANON_KEY
)

// 3Ô∏è‚É£ Export handler cho Netlify Functions
exports.handler = async function(event) {
  // 4Ô∏è‚É£ L·∫•y nguy√™n raw query string (v√≠ d·ª• "id=F01774;date=...")
  let rawQS = event.rawQueryString || ''

  // 5Ô∏è‚É£ Thay to√†n b·ªô ';' th√†nh '&' ƒë·ªÉ parser hi·ªÉu ƒë√∫ng
  //    "id=F01774;date=07/05/2025" ‚Üí "id=F01774&date=07/05/2025"
  rawQS = rawQS.replace(/;/g, '&')

  // 6Ô∏è‚É£ T·∫°o URL dummy g·∫Øn rawQS, r·ªìi d√πng URLSearchParams
  const tmp = new URL('http://dummy/?' + rawQS)
  const params = tmp.searchParams

  // 7Ô∏è‚É£ L·∫•y t·ª´ng tham s·ªë (null n·∫øu kh√¥ng c√≥)
  const id      = params.get('id')
  const date    = params.get('date')
  const time    = params.get('time')
  const mucnuoc = params.get('mucnuoc')
  const vol     = params.get('vol')
  const cbe1x4x = params.get('cbe1x4x')

  // 8Ô∏è‚É£ Validate b·∫Øt bu·ªôc ƒë·ªß 6 tr∆∞·ªùng
  if (!id || !date || !time || !mucnuoc || !vol || !cbe1x4x) {
    return {
      statusCode: 400,
      body: JSON.stringify({
        error: 'Thi·∫øu tham s·ªë: id, date, time, mucnuoc, vol ho·∫∑c cbe1x4x'
      })
    }
  }

  try {
    // 9Ô∏è‚É£ Chuy·ªÉn mucnuoc/vol th√†nh s·ªë
    const mu = parseInt(mucnuoc, 10)
    const vo = parseInt(vol,     10)

    // üîü Insert v√†o Supabase
    const { error } = await supabase
      .from('sensor_data')
      .insert([{
        id, date, time,
        mucnuoc: mu,
        vol:      vo,
        cbe1x4x
      }])

    // 1Ô∏è‚É£1Ô∏è‚É£ N·∫øu l·ªói DB, tr·∫£ 500 k√®m message
    if (error) {
      return {
        statusCode: 500,
        body: JSON.stringify({ error: error.message })
      }
    }

    // 1Ô∏è‚É£2Ô∏è‚É£ Th√†nh c√¥ng ‚Üí tr·∫£ v·ªÅ x√°c nh·∫≠n v√† echo l·∫°i d·ªØ li·ªáu
    return {
      statusCode: 200,
      body: JSON.stringify({
        status:   'received',
        id, date, time,
        mucnuoc: mu,
        vol:      vo,
        cbe1x4x
      })
    }
  } catch (err) {
    // 1Ô∏è‚É£3Ô∏è‚É£ B·∫Øt m·ªçi exception kh√°c
    return {
      statusCode: 500,
      body: JSON.stringify({ error: err.message })
    }
  }
}
